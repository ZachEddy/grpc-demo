// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc-demo-server/pkg/pb/demo.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	grpc-demo-server/pkg/pb/demo.proto

It has these top-level messages:
	CreateTickerRequest
	CreateTickerResponse
	StopClockRequest
	StopClockResponse
	StopAllClocksRequest
	StopAllClocksResponse
	ListClocksRequest
	ListClocksResponse
	GetClockEventsRequest
	ClockEvent
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClockEvent_Event int32

const (
	ClockEvent_START ClockEvent_Event = 0
	ClockEvent_RESET ClockEvent_Event = 1
	ClockEvent_STOP  ClockEvent_Event = 2
)

var ClockEvent_Event_name = map[int32]string{
	0: "START",
	1: "RESET",
	2: "STOP",
}
var ClockEvent_Event_value = map[string]int32{
	"START": 0,
	"RESET": 1,
	"STOP":  2,
}

func (x ClockEvent_Event) String() string {
	return proto.EnumName(ClockEvent_Event_name, int32(x))
}
func (ClockEvent_Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type CreateTickerRequest struct {
	Interval uint32 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
}

func (m *CreateTickerRequest) Reset()                    { *m = CreateTickerRequest{} }
func (m *CreateTickerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTickerRequest) ProtoMessage()               {}
func (*CreateTickerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTickerRequest) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type CreateTickerResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateTickerResponse) Reset()                    { *m = CreateTickerResponse{} }
func (m *CreateTickerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTickerResponse) ProtoMessage()               {}
func (*CreateTickerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateTickerResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StopClockRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StopClockRequest) Reset()                    { *m = StopClockRequest{} }
func (m *StopClockRequest) String() string            { return proto.CompactTextString(m) }
func (*StopClockRequest) ProtoMessage()               {}
func (*StopClockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StopClockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StopClockResponse struct {
}

func (m *StopClockResponse) Reset()                    { *m = StopClockResponse{} }
func (m *StopClockResponse) String() string            { return proto.CompactTextString(m) }
func (*StopClockResponse) ProtoMessage()               {}
func (*StopClockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StopAllClocksRequest struct {
}

func (m *StopAllClocksRequest) Reset()                    { *m = StopAllClocksRequest{} }
func (m *StopAllClocksRequest) String() string            { return proto.CompactTextString(m) }
func (*StopAllClocksRequest) ProtoMessage()               {}
func (*StopAllClocksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StopAllClocksResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *StopAllClocksResponse) Reset()                    { *m = StopAllClocksResponse{} }
func (m *StopAllClocksResponse) String() string            { return proto.CompactTextString(m) }
func (*StopAllClocksResponse) ProtoMessage()               {}
func (*StopAllClocksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StopAllClocksResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ListClocksRequest struct {
}

func (m *ListClocksRequest) Reset()                    { *m = ListClocksRequest{} }
func (m *ListClocksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClocksRequest) ProtoMessage()               {}
func (*ListClocksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListClocksResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *ListClocksResponse) Reset()                    { *m = ListClocksResponse{} }
func (m *ListClocksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListClocksResponse) ProtoMessage()               {}
func (*ListClocksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListClocksResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type GetClockEventsRequest struct {
}

func (m *GetClockEventsRequest) Reset()                    { *m = GetClockEventsRequest{} }
func (m *GetClockEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClockEventsRequest) ProtoMessage()               {}
func (*GetClockEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ClockEvent struct {
	Name  string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Event ClockEvent_Event `protobuf:"varint,2,opt,name=event,enum=ClockEvent_Event" json:"event,omitempty"`
}

func (m *ClockEvent) Reset()                    { *m = ClockEvent{} }
func (m *ClockEvent) String() string            { return proto.CompactTextString(m) }
func (*ClockEvent) ProtoMessage()               {}
func (*ClockEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClockEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClockEvent) GetEvent() ClockEvent_Event {
	if m != nil {
		return m.Event
	}
	return ClockEvent_START
}

func init() {
	proto.RegisterType((*CreateTickerRequest)(nil), "CreateTickerRequest")
	proto.RegisterType((*CreateTickerResponse)(nil), "CreateTickerResponse")
	proto.RegisterType((*StopClockRequest)(nil), "StopClockRequest")
	proto.RegisterType((*StopClockResponse)(nil), "StopClockResponse")
	proto.RegisterType((*StopAllClocksRequest)(nil), "StopAllClocksRequest")
	proto.RegisterType((*StopAllClocksResponse)(nil), "StopAllClocksResponse")
	proto.RegisterType((*ListClocksRequest)(nil), "ListClocksRequest")
	proto.RegisterType((*ListClocksResponse)(nil), "ListClocksResponse")
	proto.RegisterType((*GetClockEventsRequest)(nil), "GetClockEventsRequest")
	proto.RegisterType((*ClockEvent)(nil), "ClockEvent")
	proto.RegisterEnum("ClockEvent_Event", ClockEvent_Event_name, ClockEvent_Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Demo service

type DemoClient interface {
	CreateClock(ctx context.Context, in *CreateTickerRequest, opts ...grpc.CallOption) (*CreateTickerResponse, error)
	StopClock(ctx context.Context, in *StopClockRequest, opts ...grpc.CallOption) (*StopClockResponse, error)
	StopAllClocks(ctx context.Context, in *StopAllClocksRequest, opts ...grpc.CallOption) (*StopAllClocksResponse, error)
	ListClocks(ctx context.Context, in *ListClocksRequest, opts ...grpc.CallOption) (*ListClocksResponse, error)
	GetClockEvents(ctx context.Context, in *GetClockEventsRequest, opts ...grpc.CallOption) (Demo_GetClockEventsClient, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) CreateClock(ctx context.Context, in *CreateTickerRequest, opts ...grpc.CallOption) (*CreateTickerResponse, error) {
	out := new(CreateTickerResponse)
	err := grpc.Invoke(ctx, "/Demo/CreateClock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) StopClock(ctx context.Context, in *StopClockRequest, opts ...grpc.CallOption) (*StopClockResponse, error) {
	out := new(StopClockResponse)
	err := grpc.Invoke(ctx, "/Demo/StopClock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) StopAllClocks(ctx context.Context, in *StopAllClocksRequest, opts ...grpc.CallOption) (*StopAllClocksResponse, error) {
	out := new(StopAllClocksResponse)
	err := grpc.Invoke(ctx, "/Demo/StopAllClocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ListClocks(ctx context.Context, in *ListClocksRequest, opts ...grpc.CallOption) (*ListClocksResponse, error) {
	out := new(ListClocksResponse)
	err := grpc.Invoke(ctx, "/Demo/ListClocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetClockEvents(ctx context.Context, in *GetClockEventsRequest, opts ...grpc.CallOption) (Demo_GetClockEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Demo_serviceDesc.Streams[0], c.cc, "/Demo/GetClockEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoGetClockEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_GetClockEventsClient interface {
	Recv() (*ClockEvent, error)
	grpc.ClientStream
}

type demoGetClockEventsClient struct {
	grpc.ClientStream
}

func (x *demoGetClockEventsClient) Recv() (*ClockEvent, error) {
	m := new(ClockEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Demo service

type DemoServer interface {
	CreateClock(context.Context, *CreateTickerRequest) (*CreateTickerResponse, error)
	StopClock(context.Context, *StopClockRequest) (*StopClockResponse, error)
	StopAllClocks(context.Context, *StopAllClocksRequest) (*StopAllClocksResponse, error)
	ListClocks(context.Context, *ListClocksRequest) (*ListClocksResponse, error)
	GetClockEvents(*GetClockEventsRequest, Demo_GetClockEventsServer) error
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_CreateClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).CreateClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demo/CreateClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).CreateClock(ctx, req.(*CreateTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_StopClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).StopClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demo/StopClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).StopClock(ctx, req.(*StopClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_StopAllClocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllClocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).StopAllClocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demo/StopAllClocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).StopAllClocks(ctx, req.(*StopAllClocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ListClocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).ListClocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demo/ListClocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).ListClocks(ctx, req.(*ListClocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetClockEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetClockEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).GetClockEvents(m, &demoGetClockEventsServer{stream})
}

type Demo_GetClockEventsServer interface {
	Send(*ClockEvent) error
	grpc.ServerStream
}

type demoGetClockEventsServer struct {
	grpc.ServerStream
}

func (x *demoGetClockEventsServer) Send(m *ClockEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClock",
			Handler:    _Demo_CreateClock_Handler,
		},
		{
			MethodName: "StopClock",
			Handler:    _Demo_StopClock_Handler,
		},
		{
			MethodName: "StopAllClocks",
			Handler:    _Demo_StopAllClocks_Handler,
		},
		{
			MethodName: "ListClocks",
			Handler:    _Demo_ListClocks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClockEvents",
			Handler:       _Demo_GetClockEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc-demo-server/pkg/pb/demo.proto",
}

func init() { proto.RegisterFile("grpc-demo-server/pkg/pb/demo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x6a, 0xc2, 0x30,
	0x14, 0x86, 0x57, 0x67, 0x87, 0x3d, 0xa2, 0xd4, 0x63, 0xeb, 0xa4, 0x57, 0xd2, 0x8b, 0x29, 0x82,
	0x71, 0x73, 0x8c, 0xc1, 0x2e, 0x06, 0xe2, 0x64, 0x37, 0x83, 0x8d, 0xb6, 0x2f, 0xa0, 0xee, 0x20,
	0x62, 0x6d, 0xbb, 0x24, 0xf3, 0x91, 0xf6, 0x9c, 0xa3, 0xad, 0x53, 0xab, 0x61, 0x37, 0x25, 0xf9,
	0x73, 0xfa, 0xd1, 0xfe, 0x5f, 0xc0, 0x5d, 0xf2, 0x64, 0x31, 0xf8, 0xa4, 0x4d, 0x3c, 0x10, 0xc4,
	0xb7, 0xc4, 0x87, 0xc9, 0x7a, 0x39, 0x4c, 0xe6, 0xc3, 0x34, 0x62, 0x09, 0x8f, 0x65, 0xec, 0xde,
	0x41, 0x73, 0xc2, 0x69, 0x26, 0x29, 0x58, 0x2d, 0xd6, 0xc4, 0x3d, 0xfa, 0xfa, 0x26, 0x21, 0xd1,
	0x81, 0xca, 0x2a, 0x92, 0xc4, 0xb7, 0xb3, 0xb0, 0xad, 0x75, 0xb4, 0x5e, 0xcd, 0xdb, 0xef, 0xdd,
	0x3e, 0x58, 0xc5, 0x57, 0x44, 0x12, 0x47, 0x82, 0x10, 0xa1, 0x1c, 0xcd, 0x36, 0x94, 0xcd, 0x1b,
	0x5e, 0xb6, 0x76, 0x6f, 0xc0, 0xf4, 0x65, 0x9c, 0x4c, 0xc2, 0x78, 0xb1, 0xfe, 0x63, 0xab, 0xe6,
	0x9a, 0xd0, 0x38, 0x9a, 0xcb, 0x81, 0x6e, 0x0b, 0xac, 0x34, 0x1c, 0x87, 0x61, 0x96, 0x8b, 0x1d,
	0xc0, 0x1d, 0x80, 0x7d, 0x92, 0xef, 0xbe, 0xc0, 0x02, 0x3d, 0xa5, 0x89, 0xb6, 0xd6, 0xb9, 0xec,
	0x19, 0x5e, 0xbe, 0x49, 0xd9, 0x6f, 0x2b, 0x21, 0x8b, 0x8c, 0x3e, 0xe0, 0x71, 0xf8, 0x2f, 0xe0,
	0x1a, 0xec, 0x57, 0xca, 0x47, 0xa7, 0x5b, 0x8a, 0xe4, 0x1e, 0xc2, 0x01, 0x0e, 0xa9, 0xea, 0xbf,
	0xb0, 0x0b, 0x3a, 0xa5, 0x87, 0xed, 0x52, 0x47, 0xeb, 0xd5, 0x47, 0x0d, 0x76, 0x98, 0x67, 0xd9,
	0xd3, 0xcb, 0xcf, 0xdd, 0x2e, 0xe8, 0x39, 0xc5, 0x00, 0xdd, 0x0f, 0xc6, 0x5e, 0x60, 0x5e, 0xa4,
	0x4b, 0x6f, 0xea, 0x4f, 0x03, 0x53, 0xc3, 0x0a, 0x94, 0xfd, 0xe0, 0xfd, 0xc3, 0x2c, 0x8d, 0x7e,
	0x4a, 0x50, 0x7e, 0xa1, 0x4d, 0x8c, 0x4f, 0x50, 0xcd, 0x35, 0x64, 0x48, 0xb4, 0x98, 0xc2, 0xa3,
	0x63, 0x33, 0xa5, 0xaa, 0x11, 0x18, 0xfb, 0xba, 0xb1, 0xc1, 0x4e, 0x15, 0x39, 0xc8, 0xce, 0x6c,
	0xe0, 0x33, 0xd4, 0x0a, 0xad, 0xa3, 0xcd, 0x54, 0x76, 0x9c, 0x16, 0x53, 0xcb, 0x79, 0x00, 0x38,
	0x34, 0x8e, 0xc8, 0xce, 0x9c, 0x38, 0x4d, 0xa6, 0x50, 0xf2, 0x08, 0xf5, 0x62, 0xf9, 0xd8, 0x62,
	0x4a, 0x1b, 0x4e, 0xf5, 0xa8, 0xdc, 0x5b, 0x6d, 0x7e, 0x95, 0x5d, 0xf0, 0xfb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x66, 0x45, 0xb4, 0xcd, 0x06, 0x03, 0x00, 0x00,
}
